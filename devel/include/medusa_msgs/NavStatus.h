// Generated by gencpp from file medusa_msgs/NavStatus.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_NAVSTATUS_H
#define MEDUSA_MSGS_MESSAGE_NAVSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <medusa_msgs/Position.h>
#include <medusa_msgs/AttitudeEuler.h>
#include <medusa_msgs/VelocityNED.h>

namespace medusa_msgs
{
template <class ContainerAllocator>
struct NavStatus_
{
  typedef NavStatus_<ContainerAllocator> Type;

  NavStatus_()
    : position()
    , attitude()
    , linear_velocity()
    , timestamp()  {
    }
  NavStatus_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , attitude(_alloc)
    , linear_velocity(_alloc)
    , timestamp()  {
  (void)_alloc;
    }



   typedef  ::medusa_msgs::Position_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::medusa_msgs::AttitudeEuler_<ContainerAllocator>  _attitude_type;
  _attitude_type attitude;

   typedef  ::medusa_msgs::VelocityNED_<ContainerAllocator>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::medusa_msgs::NavStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::NavStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NavStatus_

typedef ::medusa_msgs::NavStatus_<std::allocator<void> > NavStatus;

typedef boost::shared_ptr< ::medusa_msgs::NavStatus > NavStatusPtr;
typedef boost::shared_ptr< ::medusa_msgs::NavStatus const> NavStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::NavStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::NavStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::NavStatus_<ContainerAllocator1> & lhs, const ::medusa_msgs::NavStatus_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.attitude == rhs.attitude &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::NavStatus_<ContainerAllocator1> & lhs, const ::medusa_msgs::NavStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::NavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::NavStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::NavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::NavStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::NavStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::NavStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efaabb5a01aa1186aa62d98b6b280789";
  }

  static const char* value(const ::medusa_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefaabb5a01aa1186ULL;
  static const uint64_t static_value2 = 0xaa62d98b6b280789ULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/NavStatus";
  }

  static const char* value(const ::medusa_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::NavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#NavStatus Info\n"
"\n"
"medusa_msgs/Position position\n"
"medusa_msgs/AttitudeEuler attitude\n"
"medusa_msgs/VelocityNED linear_velocity\n"
"time timestamp\n"
"================================================================================\n"
"MSG: medusa_msgs/Position\n"
"#Position Info\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 depth\n"
"float64 altitude\n"
"================================================================================\n"
"MSG: medusa_msgs/AttitudeEuler\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"================================================================================\n"
"MSG: medusa_msgs/VelocityNED\n"
"float64 north_vel\n"
"float64 east_vel\n"
"float64 down_vel\n"
;
  }

  static const char* value(const ::medusa_msgs::NavStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::NavStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.attitude);
      stream.next(m.linear_velocity);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::NavStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::NavStatus_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::medusa_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "attitude: ";
    s << std::endl;
    Printer< ::medusa_msgs::AttitudeEuler_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "linear_velocity: ";
    s << std::endl;
    Printer< ::medusa_msgs::VelocityNED_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_NAVSTATUS_H
