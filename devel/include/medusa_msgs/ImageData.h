// Generated by gencpp from file medusa_msgs/ImageData.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_IMAGEDATA_H
#define MEDUSA_MSGS_MESSAGE_IMAGEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <medusa_msgs/NavStatus.h>
#include <std_msgs/String.h>

namespace medusa_msgs
{
template <class ContainerAllocator>
struct ImageData_
{
  typedef ImageData_<ContainerAllocator> Type;

  ImageData_()
    : timestamp()
    , nav_status()
    , sensor_id(0)
    , file_dimension(0)
    , file_name()  {
    }
  ImageData_(const ContainerAllocator& _alloc)
    : timestamp()
    , nav_status(_alloc)
    , sensor_id(0)
    , file_dimension(0)
    , file_name(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::medusa_msgs::NavStatus_<ContainerAllocator>  _nav_status_type;
  _nav_status_type nav_status;

   typedef uint8_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef int32_t _file_dimension_type;
  _file_dimension_type file_dimension;

   typedef  ::std_msgs::String_<ContainerAllocator>  _file_name_type;
  _file_name_type file_name;





  typedef boost::shared_ptr< ::medusa_msgs::ImageData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::ImageData_<ContainerAllocator> const> ConstPtr;

}; // struct ImageData_

typedef ::medusa_msgs::ImageData_<std::allocator<void> > ImageData;

typedef boost::shared_ptr< ::medusa_msgs::ImageData > ImageDataPtr;
typedef boost::shared_ptr< ::medusa_msgs::ImageData const> ImageDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::ImageData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::ImageData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::ImageData_<ContainerAllocator1> & lhs, const ::medusa_msgs::ImageData_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.nav_status == rhs.nav_status &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.file_dimension == rhs.file_dimension &&
    lhs.file_name == rhs.file_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::ImageData_<ContainerAllocator1> & lhs, const ::medusa_msgs::ImageData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::ImageData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::ImageData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::ImageData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::ImageData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::ImageData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::ImageData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::ImageData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdeb665e166b3b92a73c5133fe56b8ec";
  }

  static const char* value(const ::medusa_msgs::ImageData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdeb665e166b3b92ULL;
  static const uint64_t static_value2 = 0xa73c5133fe56b8ecULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::ImageData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/ImageData";
  }

  static const char* value(const ::medusa_msgs::ImageData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::ImageData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp	\n"
"medusa_msgs/NavStatus nav_status \n"
"uint8 sensor_id\n"
"int32 file_dimension\n"
"std_msgs/String file_name\n"
"\n"
"================================================================================\n"
"MSG: medusa_msgs/NavStatus\n"
"#NavStatus Info\n"
"\n"
"medusa_msgs/Position position\n"
"medusa_msgs/AttitudeEuler attitude\n"
"medusa_msgs/VelocityNED linear_velocity\n"
"time timestamp\n"
"================================================================================\n"
"MSG: medusa_msgs/Position\n"
"#Position Info\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 depth\n"
"float64 altitude\n"
"================================================================================\n"
"MSG: medusa_msgs/AttitudeEuler\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"================================================================================\n"
"MSG: medusa_msgs/VelocityNED\n"
"float64 north_vel\n"
"float64 east_vel\n"
"float64 down_vel\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::medusa_msgs::ImageData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::ImageData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.nav_status);
      stream.next(m.sensor_id);
      stream.next(m.file_dimension);
      stream.next(m.file_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::ImageData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::ImageData_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "nav_status: ";
    s << std::endl;
    Printer< ::medusa_msgs::NavStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.nav_status);
    s << indent << "sensor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "file_dimension: ";
    Printer<int32_t>::stream(s, indent + "  ", v.file_dimension);
    s << indent << "file_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.file_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_IMAGEDATA_H
