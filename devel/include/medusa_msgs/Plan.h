// Generated by gencpp from file medusa_msgs/Plan.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_PLAN_H
#define MEDUSA_MSGS_MESSAGE_PLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <medusa_msgs/Maneuver.h>

namespace medusa_msgs
{
template <class ContainerAllocator>
struct Plan_
{
  typedef Plan_<ContainerAllocator> Type;

  Plan_()
    : plan_name()
    , plan_status()
    , num_maneuvers(0)
    , maneuvers()  {
    }
  Plan_(const ContainerAllocator& _alloc)
    : plan_name(_alloc)
    , plan_status(_alloc)
    , num_maneuvers(0)
    , maneuvers(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _plan_name_type;
  _plan_name_type plan_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _plan_status_type;
  _plan_status_type plan_status;

   typedef int32_t _num_maneuvers_type;
  _num_maneuvers_type num_maneuvers;

   typedef std::vector< ::medusa_msgs::Maneuver_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::medusa_msgs::Maneuver_<ContainerAllocator> >::other >  _maneuvers_type;
  _maneuvers_type maneuvers;





  typedef boost::shared_ptr< ::medusa_msgs::Plan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::Plan_<ContainerAllocator> const> ConstPtr;

}; // struct Plan_

typedef ::medusa_msgs::Plan_<std::allocator<void> > Plan;

typedef boost::shared_ptr< ::medusa_msgs::Plan > PlanPtr;
typedef boost::shared_ptr< ::medusa_msgs::Plan const> PlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::Plan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::Plan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::Plan_<ContainerAllocator1> & lhs, const ::medusa_msgs::Plan_<ContainerAllocator2> & rhs)
{
  return lhs.plan_name == rhs.plan_name &&
    lhs.plan_status == rhs.plan_status &&
    lhs.num_maneuvers == rhs.num_maneuvers &&
    lhs.maneuvers == rhs.maneuvers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::Plan_<ContainerAllocator1> & lhs, const ::medusa_msgs::Plan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Plan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Plan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Plan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Plan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6eba4a4450477e427676a6c597611625";
  }

  static const char* value(const ::medusa_msgs::Plan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6eba4a4450477e42ULL;
  static const uint64_t static_value2 = 0x7676a6c597611625ULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/Plan";
  }

  static const char* value(const ::medusa_msgs::Plan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Plan\n"
"\n"
"string plan_name \n"
"string plan_status\n"
"int32 num_maneuvers\n"
"medusa_msgs/Maneuver[] maneuvers  #Maneuvers in the plan\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: medusa_msgs/Maneuver\n"
"#Single Maneuver Info (Goto [1], StationKeeping [2], Dock [3], Rows_Girona [4])\n"
"\n"
"uint8 maneuver_name 	#Used in maneuvers [1,2,3,4]\n"
"medusa_msgs/Position position #[1,2,3]\n"
"uint8 z_units	#[1,2,3,4]\n"
"uint8 speed_units	#[1,2,4]\n"
"float64 speed	#[1,2,4]\n"
"\n"
"float64 timeout	#[1]\n"
"\n"
"float64 radius 		#[2]\n"
"float64 duration 	#[2]\n"
"\n"
"uint8 docking_id	#[3]\n"
"uint8 docking_maneuver	#[3]\n"
"\n"
"medusa_msgs/Position waypoint_1 #[4]\n"
"medusa_msgs/Position waypoint_2 #[4]\n"
"medusa_msgs/Position waypoint_3 #[4]\n"
"float64 track_spacing  #[4]\n"
"float64 across_tracks  #[4]\n"
"\n"
"\n"
"#Define related to maneuver_name\n"
"uint8 MANEUVER_NAME_GOTO=1\n"
"uint8 MANEUVER_NAME_ROWS=2\n"
"uint8 MANEUVER_NAME_STATION_KEEPING=3\n"
"uint8 MANEUVER_NAME_DOCK=4\n"
"\n"
"#Define related to z_units\n"
"uint8 Z_UNITS_DEPTH=5\n"
"uint8 Z_UNITS_ALTITUDE=6\n"
"\n"
"#Define related to speed_units\n"
"uint8 SPEED_UNITS_METER_PS=7\n"
"uint8 SPEED_UNITS_RPM=8\n"
"uint8 SPEED_UNITS_PERCENTAGE=9\n"
"\n"
"#Define related to the Docking station\n"
"uint8 VEHICLE_DOCK=1\n"
"uint8 VEHICLE_UNDOCK=0\n"
"\n"
"\n"
"================================================================================\n"
"MSG: medusa_msgs/Position\n"
"#Position Info\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 depth\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::medusa_msgs::Plan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::Plan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan_name);
      stream.next(m.plan_status);
      stream.next(m.num_maneuvers);
      stream.next(m.maneuvers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Plan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::Plan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::Plan_<ContainerAllocator>& v)
  {
    s << indent << "plan_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.plan_name);
    s << indent << "plan_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.plan_status);
    s << indent << "num_maneuvers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_maneuvers);
    s << indent << "maneuvers[]" << std::endl;
    for (size_t i = 0; i < v.maneuvers.size(); ++i)
    {
      s << indent << "  maneuvers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::medusa_msgs::Maneuver_<ContainerAllocator> >::stream(s, indent + "    ", v.maneuvers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_PLAN_H
