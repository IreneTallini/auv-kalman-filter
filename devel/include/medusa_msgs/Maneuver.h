// Generated by gencpp from file medusa_msgs/Maneuver.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_MANEUVER_H
#define MEDUSA_MSGS_MESSAGE_MANEUVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <medusa_msgs/Position.h>
#include <medusa_msgs/Position.h>
#include <medusa_msgs/Position.h>
#include <medusa_msgs/Position.h>

namespace medusa_msgs
{
template <class ContainerAllocator>
struct Maneuver_
{
  typedef Maneuver_<ContainerAllocator> Type;

  Maneuver_()
    : maneuver_name(0)
    , position()
    , z_units(0)
    , speed_units(0)
    , speed(0.0)
    , timeout(0.0)
    , radius(0.0)
    , duration(0.0)
    , docking_id(0)
    , docking_maneuver(0)
    , waypoint_1()
    , waypoint_2()
    , waypoint_3()
    , track_spacing(0.0)
    , across_tracks(0.0)  {
    }
  Maneuver_(const ContainerAllocator& _alloc)
    : maneuver_name(0)
    , position(_alloc)
    , z_units(0)
    , speed_units(0)
    , speed(0.0)
    , timeout(0.0)
    , radius(0.0)
    , duration(0.0)
    , docking_id(0)
    , docking_maneuver(0)
    , waypoint_1(_alloc)
    , waypoint_2(_alloc)
    , waypoint_3(_alloc)
    , track_spacing(0.0)
    , across_tracks(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _maneuver_name_type;
  _maneuver_name_type maneuver_name;

   typedef  ::medusa_msgs::Position_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef uint8_t _z_units_type;
  _z_units_type z_units;

   typedef uint8_t _speed_units_type;
  _speed_units_type speed_units;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _timeout_type;
  _timeout_type timeout;

   typedef double _radius_type;
  _radius_type radius;

   typedef double _duration_type;
  _duration_type duration;

   typedef uint8_t _docking_id_type;
  _docking_id_type docking_id;

   typedef uint8_t _docking_maneuver_type;
  _docking_maneuver_type docking_maneuver;

   typedef  ::medusa_msgs::Position_<ContainerAllocator>  _waypoint_1_type;
  _waypoint_1_type waypoint_1;

   typedef  ::medusa_msgs::Position_<ContainerAllocator>  _waypoint_2_type;
  _waypoint_2_type waypoint_2;

   typedef  ::medusa_msgs::Position_<ContainerAllocator>  _waypoint_3_type;
  _waypoint_3_type waypoint_3;

   typedef double _track_spacing_type;
  _track_spacing_type track_spacing;

   typedef double _across_tracks_type;
  _across_tracks_type across_tracks;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MANEUVER_NAME_GOTO)
  #undef MANEUVER_NAME_GOTO
#endif
#if defined(_WIN32) && defined(MANEUVER_NAME_ROWS)
  #undef MANEUVER_NAME_ROWS
#endif
#if defined(_WIN32) && defined(MANEUVER_NAME_STATION_KEEPING)
  #undef MANEUVER_NAME_STATION_KEEPING
#endif
#if defined(_WIN32) && defined(MANEUVER_NAME_DOCK)
  #undef MANEUVER_NAME_DOCK
#endif
#if defined(_WIN32) && defined(Z_UNITS_DEPTH)
  #undef Z_UNITS_DEPTH
#endif
#if defined(_WIN32) && defined(Z_UNITS_ALTITUDE)
  #undef Z_UNITS_ALTITUDE
#endif
#if defined(_WIN32) && defined(SPEED_UNITS_METER_PS)
  #undef SPEED_UNITS_METER_PS
#endif
#if defined(_WIN32) && defined(SPEED_UNITS_RPM)
  #undef SPEED_UNITS_RPM
#endif
#if defined(_WIN32) && defined(SPEED_UNITS_PERCENTAGE)
  #undef SPEED_UNITS_PERCENTAGE
#endif
#if defined(_WIN32) && defined(VEHICLE_DOCK)
  #undef VEHICLE_DOCK
#endif
#if defined(_WIN32) && defined(VEHICLE_UNDOCK)
  #undef VEHICLE_UNDOCK
#endif

  enum {
    MANEUVER_NAME_GOTO = 1u,
    MANEUVER_NAME_ROWS = 2u,
    MANEUVER_NAME_STATION_KEEPING = 3u,
    MANEUVER_NAME_DOCK = 4u,
    Z_UNITS_DEPTH = 5u,
    Z_UNITS_ALTITUDE = 6u,
    SPEED_UNITS_METER_PS = 7u,
    SPEED_UNITS_RPM = 8u,
    SPEED_UNITS_PERCENTAGE = 9u,
    VEHICLE_DOCK = 1u,
    VEHICLE_UNDOCK = 0u,
  };


  typedef boost::shared_ptr< ::medusa_msgs::Maneuver_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::Maneuver_<ContainerAllocator> const> ConstPtr;

}; // struct Maneuver_

typedef ::medusa_msgs::Maneuver_<std::allocator<void> > Maneuver;

typedef boost::shared_ptr< ::medusa_msgs::Maneuver > ManeuverPtr;
typedef boost::shared_ptr< ::medusa_msgs::Maneuver const> ManeuverConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::Maneuver_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::Maneuver_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::Maneuver_<ContainerAllocator1> & lhs, const ::medusa_msgs::Maneuver_<ContainerAllocator2> & rhs)
{
  return lhs.maneuver_name == rhs.maneuver_name &&
    lhs.position == rhs.position &&
    lhs.z_units == rhs.z_units &&
    lhs.speed_units == rhs.speed_units &&
    lhs.speed == rhs.speed &&
    lhs.timeout == rhs.timeout &&
    lhs.radius == rhs.radius &&
    lhs.duration == rhs.duration &&
    lhs.docking_id == rhs.docking_id &&
    lhs.docking_maneuver == rhs.docking_maneuver &&
    lhs.waypoint_1 == rhs.waypoint_1 &&
    lhs.waypoint_2 == rhs.waypoint_2 &&
    lhs.waypoint_3 == rhs.waypoint_3 &&
    lhs.track_spacing == rhs.track_spacing &&
    lhs.across_tracks == rhs.across_tracks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::Maneuver_<ContainerAllocator1> & lhs, const ::medusa_msgs::Maneuver_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Maneuver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Maneuver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Maneuver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Maneuver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Maneuver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Maneuver_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::Maneuver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ee9d1b8dc5a62fdf564b7b7c9695f13";
  }

  static const char* value(const ::medusa_msgs::Maneuver_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ee9d1b8dc5a62fdULL;
  static const uint64_t static_value2 = 0xf564b7b7c9695f13ULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::Maneuver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/Maneuver";
  }

  static const char* value(const ::medusa_msgs::Maneuver_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::Maneuver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Single Maneuver Info (Goto [1], StationKeeping [2], Dock [3], Rows_Girona [4])\n"
"\n"
"uint8 maneuver_name 	#Used in maneuvers [1,2,3,4]\n"
"medusa_msgs/Position position #[1,2,3]\n"
"uint8 z_units	#[1,2,3,4]\n"
"uint8 speed_units	#[1,2,4]\n"
"float64 speed	#[1,2,4]\n"
"\n"
"float64 timeout	#[1]\n"
"\n"
"float64 radius 		#[2]\n"
"float64 duration 	#[2]\n"
"\n"
"uint8 docking_id	#[3]\n"
"uint8 docking_maneuver	#[3]\n"
"\n"
"medusa_msgs/Position waypoint_1 #[4]\n"
"medusa_msgs/Position waypoint_2 #[4]\n"
"medusa_msgs/Position waypoint_3 #[4]\n"
"float64 track_spacing  #[4]\n"
"float64 across_tracks  #[4]\n"
"\n"
"\n"
"#Define related to maneuver_name\n"
"uint8 MANEUVER_NAME_GOTO=1\n"
"uint8 MANEUVER_NAME_ROWS=2\n"
"uint8 MANEUVER_NAME_STATION_KEEPING=3\n"
"uint8 MANEUVER_NAME_DOCK=4\n"
"\n"
"#Define related to z_units\n"
"uint8 Z_UNITS_DEPTH=5\n"
"uint8 Z_UNITS_ALTITUDE=6\n"
"\n"
"#Define related to speed_units\n"
"uint8 SPEED_UNITS_METER_PS=7\n"
"uint8 SPEED_UNITS_RPM=8\n"
"uint8 SPEED_UNITS_PERCENTAGE=9\n"
"\n"
"#Define related to the Docking station\n"
"uint8 VEHICLE_DOCK=1\n"
"uint8 VEHICLE_UNDOCK=0\n"
"\n"
"\n"
"================================================================================\n"
"MSG: medusa_msgs/Position\n"
"#Position Info\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 depth\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::medusa_msgs::Maneuver_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::Maneuver_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.maneuver_name);
      stream.next(m.position);
      stream.next(m.z_units);
      stream.next(m.speed_units);
      stream.next(m.speed);
      stream.next(m.timeout);
      stream.next(m.radius);
      stream.next(m.duration);
      stream.next(m.docking_id);
      stream.next(m.docking_maneuver);
      stream.next(m.waypoint_1);
      stream.next(m.waypoint_2);
      stream.next(m.waypoint_3);
      stream.next(m.track_spacing);
      stream.next(m.across_tracks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Maneuver_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::Maneuver_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::Maneuver_<ContainerAllocator>& v)
  {
    s << indent << "maneuver_name: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maneuver_name);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::medusa_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "z_units: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z_units);
    s << indent << "speed_units: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_units);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "timeout: ";
    Printer<double>::stream(s, indent + "  ", v.timeout);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "docking_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.docking_id);
    s << indent << "docking_maneuver: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.docking_maneuver);
    s << indent << "waypoint_1: ";
    s << std::endl;
    Printer< ::medusa_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint_1);
    s << indent << "waypoint_2: ";
    s << std::endl;
    Printer< ::medusa_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint_2);
    s << indent << "waypoint_3: ";
    s << std::endl;
    Printer< ::medusa_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint_3);
    s << indent << "track_spacing: ";
    Printer<double>::stream(s, indent + "  ", v.track_spacing);
    s << indent << "across_tracks: ";
    Printer<double>::stream(s, indent + "  ", v.across_tracks);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_MANEUVER_H
