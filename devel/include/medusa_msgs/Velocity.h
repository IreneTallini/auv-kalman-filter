// Generated by gencpp from file medusa_msgs/Velocity.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_VELOCITY_H
#define MEDUSA_MSGS_MESSAGE_VELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <medusa_msgs/VelocityNED.h>
#include <medusa_msgs/VelocityBody.h>

namespace medusa_msgs
{
template <class ContainerAllocator>
struct Velocity_
{
  typedef Velocity_<ContainerAllocator> Type;

  Velocity_()
    : ned_velocity()
    , body_velocity()
    , speed(0.0)
    , timestamp()  {
    }
  Velocity_(const ContainerAllocator& _alloc)
    : ned_velocity(_alloc)
    , body_velocity(_alloc)
    , speed(0.0)
    , timestamp()  {
  (void)_alloc;
    }



   typedef  ::medusa_msgs::VelocityNED_<ContainerAllocator>  _ned_velocity_type;
  _ned_velocity_type ned_velocity;

   typedef  ::medusa_msgs::VelocityBody_<ContainerAllocator>  _body_velocity_type;
  _body_velocity_type body_velocity;

   typedef double _speed_type;
  _speed_type speed;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::medusa_msgs::Velocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::Velocity_<ContainerAllocator> const> ConstPtr;

}; // struct Velocity_

typedef ::medusa_msgs::Velocity_<std::allocator<void> > Velocity;

typedef boost::shared_ptr< ::medusa_msgs::Velocity > VelocityPtr;
typedef boost::shared_ptr< ::medusa_msgs::Velocity const> VelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::Velocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::Velocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::Velocity_<ContainerAllocator1> & lhs, const ::medusa_msgs::Velocity_<ContainerAllocator2> & rhs)
{
  return lhs.ned_velocity == rhs.ned_velocity &&
    lhs.body_velocity == rhs.body_velocity &&
    lhs.speed == rhs.speed &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::Velocity_<ContainerAllocator1> & lhs, const ::medusa_msgs::Velocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Velocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Velocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Velocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Velocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Velocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Velocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::Velocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89c3e51eae0c79f238e531a3238e0f88";
  }

  static const char* value(const ::medusa_msgs::Velocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89c3e51eae0c79f2ULL;
  static const uint64_t static_value2 = 0x38e531a3238e0f88ULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::Velocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/Velocity";
  }

  static const char* value(const ::medusa_msgs::Velocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::Velocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Velocity Info\n"
"\n"
"medusa_msgs/VelocityNED ned_velocity\n"
"medusa_msgs/VelocityBody body_velocity\n"
"float64 speed #module of the velocity vector\n"
"time timestamp\n"
"================================================================================\n"
"MSG: medusa_msgs/VelocityNED\n"
"float64 north_vel\n"
"float64 east_vel\n"
"float64 down_vel\n"
"================================================================================\n"
"MSG: medusa_msgs/VelocityBody\n"
"float64 vx\n"
"float64 vy\n"
"float64 vz\n"
;
  }

  static const char* value(const ::medusa_msgs::Velocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::Velocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ned_velocity);
      stream.next(m.body_velocity);
      stream.next(m.speed);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Velocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::Velocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::Velocity_<ContainerAllocator>& v)
  {
    s << indent << "ned_velocity: ";
    s << std::endl;
    Printer< ::medusa_msgs::VelocityNED_<ContainerAllocator> >::stream(s, indent + "  ", v.ned_velocity);
    s << indent << "body_velocity: ";
    s << std::endl;
    Printer< ::medusa_msgs::VelocityBody_<ContainerAllocator> >::stream(s, indent + "  ", v.body_velocity);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_VELOCITY_H
