// Generated by gencpp from file medusa_msgs/VelocityNED.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_VELOCITYNED_H
#define MEDUSA_MSGS_MESSAGE_VELOCITYNED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace medusa_msgs
{
template <class ContainerAllocator>
struct VelocityNED_
{
  typedef VelocityNED_<ContainerAllocator> Type;

  VelocityNED_()
    : north_vel(0.0)
    , east_vel(0.0)
    , down_vel(0.0)  {
    }
  VelocityNED_(const ContainerAllocator& _alloc)
    : north_vel(0.0)
    , east_vel(0.0)
    , down_vel(0.0)  {
  (void)_alloc;
    }



   typedef double _north_vel_type;
  _north_vel_type north_vel;

   typedef double _east_vel_type;
  _east_vel_type east_vel;

   typedef double _down_vel_type;
  _down_vel_type down_vel;





  typedef boost::shared_ptr< ::medusa_msgs::VelocityNED_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::VelocityNED_<ContainerAllocator> const> ConstPtr;

}; // struct VelocityNED_

typedef ::medusa_msgs::VelocityNED_<std::allocator<void> > VelocityNED;

typedef boost::shared_ptr< ::medusa_msgs::VelocityNED > VelocityNEDPtr;
typedef boost::shared_ptr< ::medusa_msgs::VelocityNED const> VelocityNEDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::VelocityNED_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::VelocityNED_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::VelocityNED_<ContainerAllocator1> & lhs, const ::medusa_msgs::VelocityNED_<ContainerAllocator2> & rhs)
{
  return lhs.north_vel == rhs.north_vel &&
    lhs.east_vel == rhs.east_vel &&
    lhs.down_vel == rhs.down_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::VelocityNED_<ContainerAllocator1> & lhs, const ::medusa_msgs::VelocityNED_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::VelocityNED_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::VelocityNED_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::VelocityNED_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2b8e51aaded904c3e05f16a0c910d29";
  }

  static const char* value(const ::medusa_msgs::VelocityNED_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2b8e51aaded904cULL;
  static const uint64_t static_value2 = 0x3e05f16a0c910d29ULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/VelocityNED";
  }

  static const char* value(const ::medusa_msgs::VelocityNED_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 north_vel\n"
"float64 east_vel\n"
"float64 down_vel\n"
;
  }

  static const char* value(const ::medusa_msgs::VelocityNED_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.north_vel);
      stream.next(m.east_vel);
      stream.next(m.down_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelocityNED_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::VelocityNED_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::VelocityNED_<ContainerAllocator>& v)
  {
    s << indent << "north_vel: ";
    Printer<double>::stream(s, indent + "  ", v.north_vel);
    s << indent << "east_vel: ";
    Printer<double>::stream(s, indent + "  ", v.east_vel);
    s << indent << "down_vel: ";
    Printer<double>::stream(s, indent + "  ", v.down_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_VELOCITYNED_H
