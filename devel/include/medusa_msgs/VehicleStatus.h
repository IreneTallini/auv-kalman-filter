// Generated by gencpp from file medusa_msgs/VehicleStatus.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_VEHICLESTATUS_H
#define MEDUSA_MSGS_MESSAGE_VEHICLESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <medusa_msgs/Battery.h>

namespace medusa_msgs
{
template <class ContainerAllocator>
struct VehicleStatus_
{
  typedef VehicleStatus_<ContainerAllocator> Type;

  VehicleStatus_()
    : temperature(0.0)
    , humidity(0.0)
    , buoyancy(0.0)
    , internal_pressure(0.0)
    , battery()
    , timestamp()  {
    }
  VehicleStatus_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , humidity(0.0)
    , buoyancy(0.0)
    , internal_pressure(0.0)
    , battery(_alloc)
    , timestamp()  {
  (void)_alloc;
    }



   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _humidity_type;
  _humidity_type humidity;

   typedef float _buoyancy_type;
  _buoyancy_type buoyancy;

   typedef float _internal_pressure_type;
  _internal_pressure_type internal_pressure;

   typedef  ::medusa_msgs::Battery_<ContainerAllocator>  _battery_type;
  _battery_type battery;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::medusa_msgs::VehicleStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::VehicleStatus_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleStatus_

typedef ::medusa_msgs::VehicleStatus_<std::allocator<void> > VehicleStatus;

typedef boost::shared_ptr< ::medusa_msgs::VehicleStatus > VehicleStatusPtr;
typedef boost::shared_ptr< ::medusa_msgs::VehicleStatus const> VehicleStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::VehicleStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::VehicleStatus_<ContainerAllocator1> & lhs, const ::medusa_msgs::VehicleStatus_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.humidity == rhs.humidity &&
    lhs.buoyancy == rhs.buoyancy &&
    lhs.internal_pressure == rhs.internal_pressure &&
    lhs.battery == rhs.battery &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::VehicleStatus_<ContainerAllocator1> & lhs, const ::medusa_msgs::VehicleStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::VehicleStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a35718b2b68a03159df7289abbd1e7c2";
  }

  static const char* value(const ::medusa_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa35718b2b68a0315ULL;
  static const uint64_t static_value2 = 0x9df7289abbd1e7c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/VehicleStatus";
  }

  static const char* value(const ::medusa_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#VehicleStatus Info\n"
"\n"
"float32 temperature\n"
"float32 humidity\n"
"float32 buoyancy\n"
"float32 internal_pressure\n"
"medusa_msgs/Battery battery\n"
"time timestamp\n"
"================================================================================\n"
"MSG: medusa_msgs/Battery\n"
"#Battery Info\n"
"\n"
"medusa_msgs/NavStatus nav_status\n"
"time timestamp\n"
"float32 percentage\n"
"\n"
"================================================================================\n"
"MSG: medusa_msgs/NavStatus\n"
"#NavStatus Info\n"
"\n"
"medusa_msgs/Position position\n"
"medusa_msgs/AttitudeEuler attitude\n"
"medusa_msgs/VelocityNED linear_velocity\n"
"time timestamp\n"
"================================================================================\n"
"MSG: medusa_msgs/Position\n"
"#Position Info\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 depth\n"
"float64 altitude\n"
"================================================================================\n"
"MSG: medusa_msgs/AttitudeEuler\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"================================================================================\n"
"MSG: medusa_msgs/VelocityNED\n"
"float64 north_vel\n"
"float64 east_vel\n"
"float64 down_vel\n"
;
  }

  static const char* value(const ::medusa_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.humidity);
      stream.next(m.buoyancy);
      stream.next(m.internal_pressure);
      stream.next(m.battery);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::VehicleStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::VehicleStatus_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "humidity: ";
    Printer<float>::stream(s, indent + "  ", v.humidity);
    s << indent << "buoyancy: ";
    Printer<float>::stream(s, indent + "  ", v.buoyancy);
    s << indent << "internal_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.internal_pressure);
    s << indent << "battery: ";
    s << std::endl;
    Printer< ::medusa_msgs::Battery_<ContainerAllocator> >::stream(s, indent + "  ", v.battery);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_VEHICLESTATUS_H
