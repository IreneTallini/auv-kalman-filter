// Generated by gencpp from file medusa_msgs/SonarGet.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_SONARGET_H
#define MEDUSA_MSGS_MESSAGE_SONARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace medusa_msgs
{
template <class ContainerAllocator>
struct SonarGet_
{
  typedef SonarGet_<ContainerAllocator> Type;

  SonarGet_()
    : sonar_id(0)
    , lines(0)
    , sequence(false)  {
    }
  SonarGet_(const ContainerAllocator& _alloc)
    : sonar_id(0)
    , lines(0)
    , sequence(false)  {
  (void)_alloc;
    }



   typedef uint8_t _sonar_id_type;
  _sonar_id_type sonar_id;

   typedef int32_t _lines_type;
  _lines_type lines;

   typedef uint8_t _sequence_type;
  _sequence_type sequence;





  typedef boost::shared_ptr< ::medusa_msgs::SonarGet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::SonarGet_<ContainerAllocator> const> ConstPtr;

}; // struct SonarGet_

typedef ::medusa_msgs::SonarGet_<std::allocator<void> > SonarGet;

typedef boost::shared_ptr< ::medusa_msgs::SonarGet > SonarGetPtr;
typedef boost::shared_ptr< ::medusa_msgs::SonarGet const> SonarGetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::SonarGet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::SonarGet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::SonarGet_<ContainerAllocator1> & lhs, const ::medusa_msgs::SonarGet_<ContainerAllocator2> & rhs)
{
  return lhs.sonar_id == rhs.sonar_id &&
    lhs.lines == rhs.lines &&
    lhs.sequence == rhs.sequence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::SonarGet_<ContainerAllocator1> & lhs, const ::medusa_msgs::SonarGet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::SonarGet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::SonarGet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::SonarGet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::SonarGet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::SonarGet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::SonarGet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::SonarGet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e28181e538bd1a400f55688c83baa26e";
  }

  static const char* value(const ::medusa_msgs::SonarGet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe28181e538bd1a40ULL;
  static const uint64_t static_value2 = 0x0f55688c83baa26eULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::SonarGet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/SonarGet";
  }

  static const char* value(const ::medusa_msgs::SonarGet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::SonarGet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 sonar_id\n"
"\n"
"int32 lines\n"
"\n"
"bool sequence\n"
;
  }

  static const char* value(const ::medusa_msgs::SonarGet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::SonarGet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sonar_id);
      stream.next(m.lines);
      stream.next(m.sequence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SonarGet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::SonarGet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::SonarGet_<ContainerAllocator>& v)
  {
    s << indent << "sonar_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sonar_id);
    s << indent << "lines: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lines);
    s << indent << "sequence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sequence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_SONARGET_H
