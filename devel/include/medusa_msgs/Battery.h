// Generated by gencpp from file medusa_msgs/Battery.msg
// DO NOT EDIT!


#ifndef MEDUSA_MSGS_MESSAGE_BATTERY_H
#define MEDUSA_MSGS_MESSAGE_BATTERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <medusa_msgs/NavStatus.h>

namespace medusa_msgs
{
template <class ContainerAllocator>
struct Battery_
{
  typedef Battery_<ContainerAllocator> Type;

  Battery_()
    : nav_status()
    , timestamp()
    , percentage(0.0)  {
    }
  Battery_(const ContainerAllocator& _alloc)
    : nav_status(_alloc)
    , timestamp()
    , percentage(0.0)  {
  (void)_alloc;
    }



   typedef  ::medusa_msgs::NavStatus_<ContainerAllocator>  _nav_status_type;
  _nav_status_type nav_status;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef float _percentage_type;
  _percentage_type percentage;





  typedef boost::shared_ptr< ::medusa_msgs::Battery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::medusa_msgs::Battery_<ContainerAllocator> const> ConstPtr;

}; // struct Battery_

typedef ::medusa_msgs::Battery_<std::allocator<void> > Battery;

typedef boost::shared_ptr< ::medusa_msgs::Battery > BatteryPtr;
typedef boost::shared_ptr< ::medusa_msgs::Battery const> BatteryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::medusa_msgs::Battery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::medusa_msgs::Battery_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::medusa_msgs::Battery_<ContainerAllocator1> & lhs, const ::medusa_msgs::Battery_<ContainerAllocator2> & rhs)
{
  return lhs.nav_status == rhs.nav_status &&
    lhs.timestamp == rhs.timestamp &&
    lhs.percentage == rhs.percentage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::medusa_msgs::Battery_<ContainerAllocator1> & lhs, const ::medusa_msgs::Battery_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace medusa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::medusa_msgs::Battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::medusa_msgs::Battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Battery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::medusa_msgs::Battery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::medusa_msgs::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9b87d3791e115e77dfb5d873b235e5d";
  }

  static const char* value(const ::medusa_msgs::Battery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9b87d3791e115e7ULL;
  static const uint64_t static_value2 = 0x7dfb5d873b235e5dULL;
};

template<class ContainerAllocator>
struct DataType< ::medusa_msgs::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "medusa_msgs/Battery";
  }

  static const char* value(const ::medusa_msgs::Battery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::medusa_msgs::Battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Battery Info\n"
"\n"
"medusa_msgs/NavStatus nav_status\n"
"time timestamp\n"
"float32 percentage\n"
"\n"
"================================================================================\n"
"MSG: medusa_msgs/NavStatus\n"
"#NavStatus Info\n"
"\n"
"medusa_msgs/Position position\n"
"medusa_msgs/AttitudeEuler attitude\n"
"medusa_msgs/VelocityNED linear_velocity\n"
"time timestamp\n"
"================================================================================\n"
"MSG: medusa_msgs/Position\n"
"#Position Info\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 depth\n"
"float64 altitude\n"
"================================================================================\n"
"MSG: medusa_msgs/AttitudeEuler\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"================================================================================\n"
"MSG: medusa_msgs/VelocityNED\n"
"float64 north_vel\n"
"float64 east_vel\n"
"float64 down_vel\n"
;
  }

  static const char* value(const ::medusa_msgs::Battery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::medusa_msgs::Battery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nav_status);
      stream.next(m.timestamp);
      stream.next(m.percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Battery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::medusa_msgs::Battery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::medusa_msgs::Battery_<ContainerAllocator>& v)
  {
    s << indent << "nav_status: ";
    s << std::endl;
    Printer< ::medusa_msgs::NavStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.nav_status);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "percentage: ";
    Printer<float>::stream(s, indent + "  ", v.percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEDUSA_MSGS_MESSAGE_BATTERY_H
