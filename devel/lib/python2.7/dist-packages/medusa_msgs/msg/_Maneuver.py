# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from medusa_msgs/Maneuver.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import medusa_msgs.msg

class Maneuver(genpy.Message):
  _md5sum = "6ee9d1b8dc5a62fdf564b7b7c9695f13"
  _type = "medusa_msgs/Maneuver"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Single Maneuver Info (Goto [1], StationKeeping [2], Dock [3], Rows_Girona [4])

uint8 maneuver_name 	#Used in maneuvers [1,2,3,4]
medusa_msgs/Position position #[1,2,3]
uint8 z_units	#[1,2,3,4]
uint8 speed_units	#[1,2,4]
float64 speed	#[1,2,4]

float64 timeout	#[1]

float64 radius 		#[2]
float64 duration 	#[2]

uint8 docking_id	#[3]
uint8 docking_maneuver	#[3]

medusa_msgs/Position waypoint_1 #[4]
medusa_msgs/Position waypoint_2 #[4]
medusa_msgs/Position waypoint_3 #[4]
float64 track_spacing  #[4]
float64 across_tracks  #[4]


#Define related to maneuver_name
uint8 MANEUVER_NAME_GOTO=1
uint8 MANEUVER_NAME_ROWS=2
uint8 MANEUVER_NAME_STATION_KEEPING=3
uint8 MANEUVER_NAME_DOCK=4

#Define related to z_units
uint8 Z_UNITS_DEPTH=5
uint8 Z_UNITS_ALTITUDE=6

#Define related to speed_units
uint8 SPEED_UNITS_METER_PS=7
uint8 SPEED_UNITS_RPM=8
uint8 SPEED_UNITS_PERCENTAGE=9

#Define related to the Docking station
uint8 VEHICLE_DOCK=1
uint8 VEHICLE_UNDOCK=0


================================================================================
MSG: medusa_msgs/Position
#Position Info

float64 latitude
float64 longitude
float64 depth
float64 altitude"""
  # Pseudo-constants
  MANEUVER_NAME_GOTO = 1
  MANEUVER_NAME_ROWS = 2
  MANEUVER_NAME_STATION_KEEPING = 3
  MANEUVER_NAME_DOCK = 4
  Z_UNITS_DEPTH = 5
  Z_UNITS_ALTITUDE = 6
  SPEED_UNITS_METER_PS = 7
  SPEED_UNITS_RPM = 8
  SPEED_UNITS_PERCENTAGE = 9
  VEHICLE_DOCK = 1
  VEHICLE_UNDOCK = 0

  __slots__ = ['maneuver_name','position','z_units','speed_units','speed','timeout','radius','duration','docking_id','docking_maneuver','waypoint_1','waypoint_2','waypoint_3','track_spacing','across_tracks']
  _slot_types = ['uint8','medusa_msgs/Position','uint8','uint8','float64','float64','float64','float64','uint8','uint8','medusa_msgs/Position','medusa_msgs/Position','medusa_msgs/Position','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       maneuver_name,position,z_units,speed_units,speed,timeout,radius,duration,docking_id,docking_maneuver,waypoint_1,waypoint_2,waypoint_3,track_spacing,across_tracks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Maneuver, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.maneuver_name is None:
        self.maneuver_name = 0
      if self.position is None:
        self.position = medusa_msgs.msg.Position()
      if self.z_units is None:
        self.z_units = 0
      if self.speed_units is None:
        self.speed_units = 0
      if self.speed is None:
        self.speed = 0.
      if self.timeout is None:
        self.timeout = 0.
      if self.radius is None:
        self.radius = 0.
      if self.duration is None:
        self.duration = 0.
      if self.docking_id is None:
        self.docking_id = 0
      if self.docking_maneuver is None:
        self.docking_maneuver = 0
      if self.waypoint_1 is None:
        self.waypoint_1 = medusa_msgs.msg.Position()
      if self.waypoint_2 is None:
        self.waypoint_2 = medusa_msgs.msg.Position()
      if self.waypoint_3 is None:
        self.waypoint_3 = medusa_msgs.msg.Position()
      if self.track_spacing is None:
        self.track_spacing = 0.
      if self.across_tracks is None:
        self.across_tracks = 0.
    else:
      self.maneuver_name = 0
      self.position = medusa_msgs.msg.Position()
      self.z_units = 0
      self.speed_units = 0
      self.speed = 0.
      self.timeout = 0.
      self.radius = 0.
      self.duration = 0.
      self.docking_id = 0
      self.docking_maneuver = 0
      self.waypoint_1 = medusa_msgs.msg.Position()
      self.waypoint_2 = medusa_msgs.msg.Position()
      self.waypoint_3 = medusa_msgs.msg.Position()
      self.track_spacing = 0.
      self.across_tracks = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4d2B4d2B14d().pack(_x.maneuver_name, _x.position.latitude, _x.position.longitude, _x.position.depth, _x.position.altitude, _x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver, _x.waypoint_1.latitude, _x.waypoint_1.longitude, _x.waypoint_1.depth, _x.waypoint_1.altitude, _x.waypoint_2.latitude, _x.waypoint_2.longitude, _x.waypoint_2.depth, _x.waypoint_2.altitude, _x.waypoint_3.latitude, _x.waypoint_3.longitude, _x.waypoint_3.depth, _x.waypoint_3.altitude, _x.track_spacing, _x.across_tracks))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = medusa_msgs.msg.Position()
      if self.waypoint_1 is None:
        self.waypoint_1 = medusa_msgs.msg.Position()
      if self.waypoint_2 is None:
        self.waypoint_2 = medusa_msgs.msg.Position()
      if self.waypoint_3 is None:
        self.waypoint_3 = medusa_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 181
      (_x.maneuver_name, _x.position.latitude, _x.position.longitude, _x.position.depth, _x.position.altitude, _x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver, _x.waypoint_1.latitude, _x.waypoint_1.longitude, _x.waypoint_1.depth, _x.waypoint_1.altitude, _x.waypoint_2.latitude, _x.waypoint_2.longitude, _x.waypoint_2.depth, _x.waypoint_2.altitude, _x.waypoint_3.latitude, _x.waypoint_3.longitude, _x.waypoint_3.depth, _x.waypoint_3.altitude, _x.track_spacing, _x.across_tracks,) = _get_struct_B4d2B4d2B14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4d2B4d2B14d().pack(_x.maneuver_name, _x.position.latitude, _x.position.longitude, _x.position.depth, _x.position.altitude, _x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver, _x.waypoint_1.latitude, _x.waypoint_1.longitude, _x.waypoint_1.depth, _x.waypoint_1.altitude, _x.waypoint_2.latitude, _x.waypoint_2.longitude, _x.waypoint_2.depth, _x.waypoint_2.altitude, _x.waypoint_3.latitude, _x.waypoint_3.longitude, _x.waypoint_3.depth, _x.waypoint_3.altitude, _x.track_spacing, _x.across_tracks))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = medusa_msgs.msg.Position()
      if self.waypoint_1 is None:
        self.waypoint_1 = medusa_msgs.msg.Position()
      if self.waypoint_2 is None:
        self.waypoint_2 = medusa_msgs.msg.Position()
      if self.waypoint_3 is None:
        self.waypoint_3 = medusa_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 181
      (_x.maneuver_name, _x.position.latitude, _x.position.longitude, _x.position.depth, _x.position.altitude, _x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver, _x.waypoint_1.latitude, _x.waypoint_1.longitude, _x.waypoint_1.depth, _x.waypoint_1.altitude, _x.waypoint_2.latitude, _x.waypoint_2.longitude, _x.waypoint_2.depth, _x.waypoint_2.altitude, _x.waypoint_3.latitude, _x.waypoint_3.longitude, _x.waypoint_3.depth, _x.waypoint_3.altitude, _x.track_spacing, _x.across_tracks,) = _get_struct_B4d2B4d2B14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4d2B4d2B14d = None
def _get_struct_B4d2B4d2B14d():
    global _struct_B4d2B4d2B14d
    if _struct_B4d2B4d2B14d is None:
        _struct_B4d2B4d2B14d = struct.Struct("<B4d2B4d2B14d")
    return _struct_B4d2B4d2B14d
