# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from medusa_msgs/Plan.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import medusa_msgs.msg

class Plan(genpy.Message):
  _md5sum = "6eba4a4450477e427676a6c597611625"
  _type = "medusa_msgs/Plan"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Plan

string plan_name 
string plan_status
int32 num_maneuvers
medusa_msgs/Maneuver[] maneuvers  #Maneuvers in the plan



================================================================================
MSG: medusa_msgs/Maneuver
#Single Maneuver Info (Goto [1], StationKeeping [2], Dock [3], Rows_Girona [4])

uint8 maneuver_name 	#Used in maneuvers [1,2,3,4]
medusa_msgs/Position position #[1,2,3]
uint8 z_units	#[1,2,3,4]
uint8 speed_units	#[1,2,4]
float64 speed	#[1,2,4]

float64 timeout	#[1]

float64 radius 		#[2]
float64 duration 	#[2]

uint8 docking_id	#[3]
uint8 docking_maneuver	#[3]

medusa_msgs/Position waypoint_1 #[4]
medusa_msgs/Position waypoint_2 #[4]
medusa_msgs/Position waypoint_3 #[4]
float64 track_spacing  #[4]
float64 across_tracks  #[4]


#Define related to maneuver_name
uint8 MANEUVER_NAME_GOTO=1
uint8 MANEUVER_NAME_ROWS=2
uint8 MANEUVER_NAME_STATION_KEEPING=3
uint8 MANEUVER_NAME_DOCK=4

#Define related to z_units
uint8 Z_UNITS_DEPTH=5
uint8 Z_UNITS_ALTITUDE=6

#Define related to speed_units
uint8 SPEED_UNITS_METER_PS=7
uint8 SPEED_UNITS_RPM=8
uint8 SPEED_UNITS_PERCENTAGE=9

#Define related to the Docking station
uint8 VEHICLE_DOCK=1
uint8 VEHICLE_UNDOCK=0


================================================================================
MSG: medusa_msgs/Position
#Position Info

float64 latitude
float64 longitude
float64 depth
float64 altitude"""
  __slots__ = ['plan_name','plan_status','num_maneuvers','maneuvers']
  _slot_types = ['string','string','int32','medusa_msgs/Maneuver[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       plan_name,plan_status,num_maneuvers,maneuvers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Plan, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.plan_name is None:
        self.plan_name = ''
      if self.plan_status is None:
        self.plan_status = ''
      if self.num_maneuvers is None:
        self.num_maneuvers = 0
      if self.maneuvers is None:
        self.maneuvers = []
    else:
      self.plan_name = ''
      self.plan_status = ''
      self.num_maneuvers = 0
      self.maneuvers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.plan_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.plan_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num_maneuvers
      buff.write(_get_struct_i().pack(_x))
      length = len(self.maneuvers)
      buff.write(_struct_I.pack(length))
      for val1 in self.maneuvers:
        _x = val1.maneuver_name
        buff.write(_get_struct_B().pack(_x))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _x = val1
        buff.write(_get_struct_2B4d2B().pack(_x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver))
        _v2 = val1.waypoint_1
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _v3 = val1.waypoint_2
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _v4 = val1.waypoint_3
        _x = _v4
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.track_spacing, _x.across_tracks))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.maneuvers is None:
        self.maneuvers = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plan_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plan_status = str[start:end]
      start = end
      end += 4
      (self.num_maneuvers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.maneuvers = []
      for i in range(0, length):
        val1 = medusa_msgs.msg.Maneuver()
        start = end
        end += 1
        (val1.maneuver_name,) = _get_struct_B().unpack(str[start:end])
        _v5 = val1.position
        _x = _v5
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 36
        (_x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver,) = _get_struct_2B4d2B().unpack(str[start:end])
        _v6 = val1.waypoint_1
        _x = _v6
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _v7 = val1.waypoint_2
        _x = _v7
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _v8 = val1.waypoint_3
        _x = _v8
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.track_spacing, _x.across_tracks,) = _get_struct_2d().unpack(str[start:end])
        self.maneuvers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.plan_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.plan_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num_maneuvers
      buff.write(_get_struct_i().pack(_x))
      length = len(self.maneuvers)
      buff.write(_struct_I.pack(length))
      for val1 in self.maneuvers:
        _x = val1.maneuver_name
        buff.write(_get_struct_B().pack(_x))
        _v9 = val1.position
        _x = _v9
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _x = val1
        buff.write(_get_struct_2B4d2B().pack(_x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver))
        _v10 = val1.waypoint_1
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _v11 = val1.waypoint_2
        _x = _v11
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _v12 = val1.waypoint_3
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.latitude, _x.longitude, _x.depth, _x.altitude))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.track_spacing, _x.across_tracks))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.maneuvers is None:
        self.maneuvers = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plan_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plan_status = str[start:end]
      start = end
      end += 4
      (self.num_maneuvers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.maneuvers = []
      for i in range(0, length):
        val1 = medusa_msgs.msg.Maneuver()
        start = end
        end += 1
        (val1.maneuver_name,) = _get_struct_B().unpack(str[start:end])
        _v13 = val1.position
        _x = _v13
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 36
        (_x.z_units, _x.speed_units, _x.speed, _x.timeout, _x.radius, _x.duration, _x.docking_id, _x.docking_maneuver,) = _get_struct_2B4d2B().unpack(str[start:end])
        _v14 = val1.waypoint_1
        _x = _v14
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _v15 = val1.waypoint_2
        _x = _v15
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _v16 = val1.waypoint_3
        _x = _v16
        start = end
        end += 32
        (_x.latitude, _x.longitude, _x.depth, _x.altitude,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.track_spacing, _x.across_tracks,) = _get_struct_2d().unpack(str[start:end])
        self.maneuvers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B4d2B = None
def _get_struct_2B4d2B():
    global _struct_2B4d2B
    if _struct_2B4d2B is None:
        _struct_2B4d2B = struct.Struct("<2B4d2B")
    return _struct_2B4d2B
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
